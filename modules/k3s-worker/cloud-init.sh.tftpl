#!/bin/bash
# cloud-init for K3s worker (Terraform templatefile)
# Template vars expected:
#   - ${master_private_ip}
#   - ${k3s_token}

set -euo pipefail

LOG_FILE="/var/log/k3s-worker-bootstrap.log"
exec > >(tee -a "$LOG_FILE") 2>&1

echo "==> K3s worker bootstrap started: $(date -Is)"

# Idempotency guard if this ever re-runs
if systemctl is-active --quiet k3s-agent; then
  echo "k3s-agent already active; exiting."
  exit 0
fi

# Basic tooling
if command -v dnf >/dev/null 2>&1; then
  dnf -y install curl iproute iptables || true
else
  yum -y install curl iproute iptables || true
fi

# Disable swap (K8s requirement)
swapoff -a || true
sed -ri 's/^[^#].*\sswap\s.*/# &/' /etc/fstab || true

# Kernel modules + sysctls for Kubernetes networking
modprobe overlay || true
modprobe br_netfilter || true
tee /etc/modules-load.d/k8s.conf >/dev/null <<EOF
overlay
br_netfilter
EOF

tee /etc/sysctl.d/90-k3s.conf >/dev/null <<'EOF'
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding = 1
EOF

sysctl --system || true

# Detect primary interface/IP at runtime (no Terraform vars needed)
primary_iface="$(ip route show default 0.0.0.0/0 | awk '{print $5}' | head -n1)"
if [[ -z "${primary_iface}" ]]; then
  primary_iface="$(ip -o -4 route show to default | awk '{print $5}' | head -n1)"
fi
primary_ip="$(ip -4 addr show dev "$primary_iface" | awk '/inet /{print $2}' | cut -d/ -f1 | head -n1)"
echo "Primary iface: ${primary_iface} | Primary IP: ${primary_ip}"

# Fetch installer with retry
installer="/tmp/get-k3s.sh"
for i in {1..20}; do
  if curl -fsSL https://get.k3s.io -o "${installer}"; then
    chmod +x "${installer}"
    break
  fi
  echo "Download attempt $i failed; retrying in 3s.
