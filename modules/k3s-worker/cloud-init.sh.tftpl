#!/bin/bash
# cloud-init for K3s worker (Terraform templatefile)
# Expected template vars (Terraform):
#   - ${master_private_ip}
#   - ${k3s_token}

set -euo pipefail

LOG_FILE="/var/log/k3s-worker-bootstrap.log"
exec > >(tee -a "$LOG_FILE") 2>&1

echo "==> K3s worker bootstrap started: $(date -Is)"

# Idempotency guard
if systemctl is-active --quiet k3s-agent; then
  echo "k3s-agent already active; exiting."
  exit 0
fi

# Basic tooling
if command -v dnf >/dev/null 2>&1; then
  dnf -y install curl iproute iptables || true
else
  yum -y install curl iproute iptables || true
fi

# Disable swap (K8s requirement)
swapoff -a || true
sed -ri 's/^[^#].*\sswap\s.*/# &/' /etc/fstab || true

# Kernel modules + sysctls for Kubernetes networking
modprobe overlay || true
modprobe br_netfilter || true
tee /etc/modules-load.d/k8s.conf >/dev/null <<EOF
overlay
br_netfilter
EOF

tee /etc/sysctl.d/90-k3s.conf >/dev/null <<'EOF'
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding = 1
EOF

sysctl --system || true

# Detect primary interface/IP at runtime
primary_iface="$(ip route show default 0.0.0.0/0 | awk '{print $5}' | head -n1)"
if [[ -z "$primary_iface" ]]; then
  primary_iface="$(ip -o -4 route show to default | awk '{print $5}' | head -n1)"
fi
primary_ip="$(ip -4 addr show dev "$primary_iface" | awk '/inet /{print $2}' | cut -d/ -f1 | head -n1)"
echo "Primary iface: $primary_iface | Primary IP: $primary_ip"

# Configure firewalld for K3s
firewall-cmd --permanent --add-port=6443/tcp
firewall-cmd --permanent --add-port=8472/udp
firewall-cmd --permanent --add-port=10250/tcp
firewall-cmd --permanent --add-port=30080/tcp
firewall-cmd --permanent --add-port=30443/tcp
firewall-cmd --permanent --zone=trusted --add-source=${cluster_pod_cidr}
firewall-cmd --permanent --zone=trusted --add-source=${cluster_service_cidr}
firewall-cmd --reload || true

# Fetch installer with retry
installer="/tmp/get-k3s.sh"
for i in {1..20}; do
  if curl -fsSL https://get.k3s.io -o "$installer"; then
    chmod +x "$installer"
    break
  fi
  echo "Download attempt $i failed; retrying in 3s..."
  sleep 3
done
if [[ ! -s "$installer" ]]; then
  echo "ERROR: Unable to download K3s installer."
  exit 1
fi

# Pin K3s version (change deliberately when you upgrade)
export INSTALL_K3S_VERSION="v1.33.3+k3s1"

# Join using the token (do not echo it)
TOKEN="${k3s_token}"
echo "==> Installing k3s agent and joining server https://${master_private_ip}:6443"
"$installer" agent \
  --server "https://${master_private_ip}:6443" \
  --token "$TOKEN" \
  --node-ip "$primary_ip" \
  --flannel-iface "$primary_iface"

systemctl enable --now k3s-agent

# Short health wait
for i in {1..24}; do
  if systemctl is-active --quiet k3s-agent; then
    echo "k3s-agent is active."
    break
  fi
  sleep 5
done

echo "==> K3s worker bootstrap complete: $(date -Is)"
