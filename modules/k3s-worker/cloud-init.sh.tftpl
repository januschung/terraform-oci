#!/bin/bash
# Cloud-init script for K3s worker nodes
# This script will automatically configure the worker to join the K3s cluster

set -e

# Update system
dnf update -y

# Disable swap (required by Kubernetes)
swapoff -a
sed -i '/swap/d' /etc/fstab

# Load required kernel modules
modprobe br_netfilter
echo "br_netfilter" >> /etc/modules-load.d/k8s.conf

# Configure sysctl for Kubernetes networking
cat > /etc/sysctl.d/k8s.conf <<EOF
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

sysctl --system

# Wait for master to be ready
echo "Waiting for master node to be ready..."
for i in {1..30}; do
  if curl -k -s "https://${master_private_ip}:6443/readyz" > /dev/null 2>&1; then
    echo "Master is ready, proceeding with worker setup"
    break
  fi
  echo "Waiting for master... attempt $i/30"
  sleep 10
done

# Install K3s worker
echo "Installing K3s worker agent..."

# Create a temporary script to handle the token
cat > /tmp/install-worker.sh <<'EOF'
#!/bin/bash
MASTER_IP="${master_private_ip}"

# Wait a bit more for the master to fully initialize
sleep 30

# Try to get the token from the master's API (this is a simplified approach)
# In production, you might want to use a more secure method
TOKEN=""
for attempt in {1..10}; do
  echo "Attempting to get node token from master... attempt $attempt"
  
  # Try to get the token from the master's node-token file via SSH
  # This assumes the worker can SSH to the master using the same key
  if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 opc@$MASTER_IP "sudo cat /var/lib/rancher/k3s/server/node-token" > /tmp/node-token 2>/dev/null; then
    TOKEN=$(cat /tmp/node-token)
    echo "Successfully retrieved node token"
    break
  fi
  
  echo "Failed to get token, waiting 30 seconds before retry..."
  sleep 30
done

if [ -z "$TOKEN" ]; then
  echo "ERROR: Could not retrieve node token from master"
  echo "You may need to manually copy the token from the master node"
  echo "Run: sudo cat /var/lib/rancher/k3s/server/node-token on the master"
  exit 1
fi

# Install K3s worker with the retrieved token
curl -sfL https://get.k3s.io | sh -s - agent \
  --server https://$MASTER_IP:6443 \
  --token "$TOKEN" \
  --kubelet-arg="node-ip=$(hostname -I | awk '{print $1}')" \
  --flannel-iface=eth0

# Clean up
rm -f /tmp/node-token
EOF

chmod +x /tmp/install-worker.sh

# Run the installation script in the background
nohup /tmp/install-worker.sh > /var/log/k3s-worker-install.log 2>&1 &

# Wait for K3s service to be active
echo "Waiting for K3s agent service to start..."
for i in {1..60}; do
  if systemctl is-active --quiet k3s-agent; then
    echo "K3s agent is now running"
    break
  fi
  echo "Waiting for K3s agent... attempt $i/60"
  sleep 10
done

# Ensure chrony time sync service is running
dnf install -y chrony
systemctl enable --now chronyd

# Configure firewall for internal communication only
# Using internal_cidr variable for firewall rules
firewall-cmd --permanent --add-port=10250/tcp
firewall-cmd --permanent --add-port=30080-30443/tcp
firewall-cmd --permanent --add-port=8472/udp
firewall-cmd --permanent --add-port=22/tcp
firewall-cmd --reload

# Create a simple health check script
cat > /usr/local/bin/health-check.sh <<'EOF'
#!/bin/bash
if systemctl is-active --quiet k3s-agent; then
    echo "K3s agent is running"
    exit 0
else
    echo "K3s agent is not running"
    exit 1
fi
EOF

chmod +x /usr/local/bin/health-check.sh

# Add health check to crontab
echo "*/5 * * * * /usr/local/bin/health-check.sh" | crontab -

# Log completion
echo "K3s worker setup completed at $(date)" >> /var/log/k3s-worker-setup.log
