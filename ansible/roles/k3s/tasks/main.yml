- name: Disable swap (required by Kubernetes)
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Remove swap entry from /etc/fstab
  replace:
    path: /etc/fstab
    regexp: '(^.*swap.*$)'
    replace: '# \1'

- name: Ensure br_netfilter module is loaded
  modprobe:
    name: br_netfilter
    state: present

- name: Ensure br_netfilter is loaded on boot
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: "br_netfilter\n"
    owner: root
    group: root
    mode: '0644'

- name: Configure sysctl for Kubernetes networking
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    reload: yes
  loop:
    - { name: net.bridge.bridge-nf-call-iptables, value: 1 }
    - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }
    - { name: net.ipv4.ip_forward, value: 1 }

- name: Install K3s master
  shell: |
    curl -sfL https://get.k3s.io | sh -s - server
  args:
    creates: /usr/local/bin/k3s

- name: Wait for K3s service to be active
  systemd:
    name: k3s
    state: started
    enabled: yes

- name: Wait for node to be Ready
  shell: |
    export PATH=/usr/local/bin:$PATH
    kubectl get nodes --no-headers | grep ' Ready '
  register: node_ready_check
  retries: 10
  delay: 15
  until: node_ready_check.rc == 0
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Ensure chrony time sync service is running
  package:
    name: chrony
    state: present

- name: Enable and start chronyd
  systemd:
    name: chronyd
    state: started
    enabled: yes

- name: Create .kube directory for opc user
  file:
    path: /home/opc/.kube
    state: directory
    owner: opc
    group: opc
    mode: '0755'

- name: Copy kubeconfig to opc user home
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /home/opc/.kube/config
    owner: opc
    group: opc
    mode: '0644'
    remote_src: yes

- name: Ensure KUBECONFIG is exported in .bashrc
  lineinfile:
    path: /home/opc/.bashrc
    line: 'export KUBECONFIG=$HOME/.kube/config'
    state: present
    create: yes
    owner: opc
    group: opc
    mode: '0644'

- name: Ensure pip3 is installed
  package:
    name: python3-pip
    state: present

- name: Ensure Kubernetes Python client is installed
  pip:
    name: kubernetes
    executable: pip3

- name: Install custom Traefik ACME config into manifests
  ansible.builtin.template:
    src: traefik-config.yaml.j2
    dest: /var/lib/rancher/k3s/server/manifests/traefik-config.yaml
    mode: '0644'

- name: Setup DuckDNS IP updater cron job
  cron:
    name: "DuckDNS Updater"
    user: root
    job: >
      curl -fsS
      "https://www.duckdns.org/update?domains={{ duckdns_domain }}&token={{ duckdns_token }}&ip={{ lb_ip }}"
      >/dev/null 2>&1
    minute: "*/5"

# --- NAT for private workers (master as gateway) ---
- name: Ensure IP forwarding is enabled (NAT)
  copy:
    dest: /etc/sysctl.d/99-nat.conf
    content: "net.ipv4.ip_forward=1\n"
    owner: root
    group: root
    mode: "0644"
  tags: [nat]

- name: Apply sysctl (NAT)
  command: sysctl --system
  changed_when: false
  tags: [nat]

- name: Install and start firewalld
  package:
    name: firewalld
    state: present
  tags: [nat]

- name: Enable firewalld
  service:
    name: firewalld
    enabled: true
    state: started
  tags: [nat]

# Detect interfaces:
# - OUT = default route interface (public-facing)
# - IN  = the *other* non-loopback interface (the workers-subnet VNIC)
- name: Detect OUT interface
  set_fact:
    nat_out_iface: "{{ ansible_facts.default_ipv4.interface }}"
  tags: [nat]

- name: Detect IN interface (workers-subnet VNIC)
  set_fact:
    nat_in_iface: >-
      {{
        (ansible_facts.interfaces
         | reject('equalto','lo')
         | reject('equalto', nat_out_iface)
         | list | first)
      }}
  tags: [nat]

- name: Assert NAT interfaces detected
  assert:
    that:
      - nat_out_iface is defined
      - nat_in_iface  is defined
    fail_msg: "Could not detect NAT interfaces. Ensure the master has a secondary VNIC attached (workers subnet)."
  tags: [nat]

- name: Enable masquerade (SNAT)
  command: firewall-cmd --permanent --add-masquerade
  register: _masq
  changed_when: "'success' in _masq.stdout"
  failed_when: false
  tags: [nat]

- name: Add direct NAT/forward rules
  loop:
    - "--permanent --direct --add-rule ipv4 nat POSTROUTING 0 -o {{ nat_out_iface }} -j MASQUERADE"
    - "--permanent --direct --add-rule ipv4 filter FORWARD 0 -i {{ nat_in_iface }} -o {{ nat_out_iface }} -m state --state RELATED,ESTABLISHED -j ACCEPT"
    - "--permanent --direct --add-rule ipv4 filter FORWARD 1 -i {{ nat_in_iface }} -o {{ nat_out_iface }} -j ACCEPT"
  command: "firewall-cmd {{ item }}"
  register: _fw
  changed_when: "'success' in _fw.stdout"
  failed_when: false
  tags: [nat]

- name: Reload firewalld (apply NAT rules)
  command: firewall-cmd --reload
  changed_when: false
  tags: [nat]
# --- end NAT block ---
